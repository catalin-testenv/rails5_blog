// ============== tinymce editor
//= require tinymce/tinymce.min
// ============== /tinymce editor

function editor_tinymce_initialize(target, on_init, on_remove) {
  'use strict';
  var $target = $(target);
  var params = $target.data('editor-tinymce') || {};

  var options = $.extend({}, {
    content_css : '<%= ENV['CONFIG_ASSETS_PREFIX'] %>/application.css',
    //selector: '#' + target.id,

    // https://www.tinymce.com/docs/configure/editor-appearance/
    // https://www.tinymce.com/docs/get-started/customize-ui/
    plugins : 'advlist autolink link image lists charmap print preview code textcolor colorpicker table searchreplace nonbreaking hr autoresize',
    toolbar: 'undo redo | styleselect | alignleft aligncenter alignright | bullist numlist | outdent indent | forecolor backcolor | code | table | searchreplace',
    // toolbar: false,
    // menubar: false,

    protect: [/\<\%.+?\%\>/g], // protect Ruby code
    // forced_root_block: false,

    setup: function(editor) {
      on_init && editor.on('init', function(e) {
        on_init(editor);
      });
      on_remove && editor.on('remove', function(e) {
        on_remove(editor);
        editor = undefined;
      });
    }
  }, params);

  tinymce.init(options);
  tinymce.execCommand('mceAddEditor', false, target.id);
}

function editor_tinymce_destroy(target, callback) {
  tinymce.execCommand("mceRemoveEditor", true, target.id); // tinymce.editors[0].id
}

$(function () {
  'use strict';
  tinymce.baseURL = '<%= ENV['CONFIG_ASSETS_PREFIX'] %>/tinymce';
  tinymce.suffix = '.min';

  $('[data-editor-tinymce]').each(function() {
    var target = this;
    var $this = $(this);
    if ($this.data('editor-ace')) { return; }
    editor_tinymce_initialize(target);
  });
});